/**
 * transcendence API
 * The transendence API enables programmatic access to transcendence.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService, Inject, Injectable, Optional } from '@nestjs/common';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { User } from '../model/user';
import { Configuration } from '../configuration';


@Injectable()
export class FollowService {

    protected basePath = 'http://localhost:4211/api';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Unfollow a user
     * 
     * @param userID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUsersFollowingUserID(userID: number, ): Observable<AxiosResponse<any>>;
    public deleteUsersFollowingUserID(userID: number, ): Observable<any> {

        if (userID === null || userID === undefined) {
            throw new Error('Required parameter userID was null or undefined when calling deleteUsersFollowingUserID.');
        }

        let headers = this.defaultHeaders;

        // authentication (sessionAuth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.delete<any>(`${this.basePath}/users/following/${encodeURIComponent(String(userID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * List the people a user follows
     * Lists the people who the specified user follows.
     * @param userID 
     * @param limit 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsersUserIDFollowing(userID: number, limit?: number, offset?: number, ): Observable<AxiosResponse<Array<User>>>;
    public getUsersUserIDFollowing(userID: number, limit?: number, offset?: number, ): Observable<any> {

        if (userID === null || userID === undefined) {
            throw new Error('Required parameter userID was null or undefined when calling getUsersUserIDFollowing.');
        }



        let queryParameters = {};
        if (limit !== undefined && limit !== null) {
            queryParameters['limit'] = <any>limit;
        }
        if (offset !== undefined && offset !== null) {
            queryParameters['offset'] = <any>offset;
        }

        let headers = this.defaultHeaders;

        // authentication (sessionAuth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<User>>(`${this.basePath}/users/${encodeURIComponent(String(userID))}/following`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Check if a user follows another user
     * 
     * @param userID 
     * @param targetUserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsersUserIDFollowingTargetUserID(userID: number, targetUserID: number, ): Observable<AxiosResponse<any>>;
    public getUsersUserIDFollowingTargetUserID(userID: number, targetUserID: number, ): Observable<any> {

        if (userID === null || userID === undefined) {
            throw new Error('Required parameter userID was null or undefined when calling getUsersUserIDFollowingTargetUserID.');
        }

        if (targetUserID === null || targetUserID === undefined) {
            throw new Error('Required parameter targetUserID was null or undefined when calling getUsersUserIDFollowingTargetUserID.');
        }

        let headers = this.defaultHeaders;

        // authentication (sessionAuth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}/users/${encodeURIComponent(String(userID))}/following/${encodeURIComponent(String(targetUserID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * List Followers of a user
     * Lists the people following the specified user.
     * @param userID 
     * @param limit 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsersUserIdFriends(userID: number, limit?: number, offset?: number, ): Observable<AxiosResponse<Array<User>>>;
    public getUsersUserIdFriends(userID: number, limit?: number, offset?: number, ): Observable<any> {

        if (userID === null || userID === undefined) {
            throw new Error('Required parameter userID was null or undefined when calling getUsersUserIdFriends.');
        }



        let queryParameters = {};
        if (limit !== undefined && limit !== null) {
            queryParameters['limit'] = <any>limit;
        }
        if (offset !== undefined && offset !== null) {
            queryParameters['offset'] = <any>offset;
        }

        let headers = this.defaultHeaders;

        // authentication (sessionAuth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<User>>(`${this.basePath}/users/${encodeURIComponent(String(userID))}/followers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Follow a user
     * 
     * @param userID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putUsersFollowingUserID(userID: number, ): Observable<AxiosResponse<any>>;
    public putUsersFollowingUserID(userID: number, ): Observable<any> {

        if (userID === null || userID === undefined) {
            throw new Error('Required parameter userID was null or undefined when calling putUsersFollowingUserID.');
        }

        let headers = this.defaultHeaders;

        // authentication (sessionAuth) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.put<any>(`${this.basePath}/users/following/${encodeURIComponent(String(userID))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
